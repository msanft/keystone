target remote :9822

python
import os
builddir = os.environ['BUILDROOT_BUILDDIR'] + '/build'
imagedir = os.environ['BUILDROOT_BUILDDIR'] + '/images'
targetdir = os.environ['BUILDROOT_BUILDDIR'] + '/target'

gdb.execute(f'add-symbol-file {builddir}/linux-6.1.32/vmlinux')
gdb.execute(f'source {builddir}/linux-6.1.32/vmlinux-gdb.py')
s = linux.symbols.LxSymbols()

# If we run lx-symbols too early, we get an invalid memory error
# since GDB can't access kernel memory at the very earliest stages
# of boot. So, proceed to start kernel
class StartBreakpoint(gdb.Breakpoint):
	def __init__(self, s):
		super().__init__('start_kernel', internal=True)
		self.s = s
		self.done = False

	def stop(self):
		# This populates s.module_paths, which we later modify
		gdb.execute(f'lx-symbols {builddir}')
		self.s.module_paths.remove(os.getcwd())
		self.done = True
		# Add these back since running lx-symbols clears them
		gdb.execute(f'add-symbol-file {imagedir}/bootrom.elf')
		gdb.execute(f'add-symbol-file {imagedir}/fw_jump.elf')
		return False

b_cleaned = False
b = StartBreakpoint(s)

def stop_handler(event):
	global b_cleaned
	if not b_cleaned and b.done:
		b.delete()
		b_cleaned = True

gdb.events.stop.connect(stop_handler)

gdb.execute(f'add-symbol-file {imagedir}/bootrom.elf')
gdb.execute(f'add-symbol-file {imagedir}/fw_jump.elf')
end
